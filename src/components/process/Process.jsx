// TODO: Consertar reader view

import React from 'react';
import PropTypes from 'prop-types';

import ProgressBar from './ProgressBar';
import ProportionalVideo from './ProportionalVideo';
import ContentCard from '../content-card/ContentCard';
import ProcessTab from './ProcessTab';
import RibbonLink from './RibbonButton';

import Image01 from '../../assets/pictures/a_img01.jpg';
import Image02 from '../../assets/pictures/a_img02.jpg';
import Separacao01 from '../../assets/pictures/foto04.JPG';
import Separacao02 from '../../assets/pictures/foto02.JPG';
import Separacao03 from '../../assets/pictures/foto08.JPG';

import randomizeArray from '../../lib/random';
import subjectsData from '../../assets/subjects-data';
import './styles/process.scss';

class Process extends React.Component {
  static propTypes = {
    showProgressBar: PropTypes.bool,
    mergeHeader: PropTypes.bool,
    handleGoToProcess: PropTypes.func.isRequired,
  };

  static defaultProps = {
    showProgressBar: false,
    mergeHeader: false,
  };

  componentDidMount() {
    window.addEventListener('scroll', this.handleScroll);
    this.sections = this.getSections();
  }

  componentWillUnmount() {
    window.removeEventListener('scroll', this.handleScroll);
  }

  getSections = () => ({
    sectionA: document.querySelector('#section-a'),
    sectionB: document.querySelector('#section-b'),
    sectionC: document.querySelector('#section-c'),
  });

  getExponentialPercentage = x => {
    const a = 5;
    return (a ** x - 1) / (a - 1);
  };

  getClampedPercentage = value => Math.min(Math.max(value, 0), 1);

  handleScroll = () => {
    const currentScroll = window.scrollY + (window.innerHeight - 88);

    const progressA =
      (currentScroll - this.sections.sectionA.offsetTop) /
      this.sections.sectionA.offsetHeight;
    const progressB =
      (currentScroll - this.sections.sectionB.offsetTop) /
      this.sections.sectionB.offsetHeight;
    const progressC =
      (currentScroll - this.sections.sectionC.offsetTop) /
      this.sections.sectionC.offsetHeight;

    const aExpo = this.getClampedPercentage(
      this.getExponentialPercentage(progressA)
    );
    const bExpo = this.getClampedPercentage(
      this.getExponentialPercentage(progressB)
    );
    const cExpo = this.getClampedPercentage(
      this.getExponentialPercentage(progressC)
    );

    const progresses = [
      document.querySelector('#progress-item-progress-a'),
      document.querySelector('#progress-item-progress-b'),
      document.querySelector('#progress-item-progress-c'),
    ];

    const icons = [
      document.querySelector('#progress-item-icon-a'),
      document.querySelector('#progress-item-icon-b'),
      document.querySelector('#progress-item-icon-c'),
    ];

    const aActive = aExpo > 0 && !bExpo;
    const bActive = bExpo > 0 && !cExpo;
    const cActive = cExpo > 0 && !bActive;

    // iOS doesn't like me setting style directly ü§î
    progresses[0].style.width = `${aExpo * 100}%`;
    progresses[1].style.width = `${bExpo * 100}%`;
    progresses[2].style.width = `${cExpo * 100}%`;

    icons[0].classList.toggle('active', aActive);
    icons[1].classList.toggle('active', bActive);
    icons[2].classList.toggle('active', cActive);
  };

  handleBarItemClick = id => {
    const to = document.querySelector(id).offsetTop;
    const isDesktop = window.matchMedia('(min-width: 768px)').matches;
    const drawerMenuOffset = 43 + (isDesktop ? 16 : 0);

    window.scrollTo({ top: to - drawerMenuOffset, behavior: 'smooth' });
  };

  render() {
    const randomized = randomizeArray(subjectsData);

    const pullTabHeight = 64;
    const browserHeight = document.documentElement.clientHeight;

    const shouldCompensate = window.matchMedia('(min-width: 768px)').matches;
    const compensation = pullTabHeight + (shouldCompensate ? 56 : 0);

    const scrollCoverHeight = browserHeight - compensation;

    const {
      showProgressBar,
      mergeHeader,
      handleGoToProcess,
      ...passthrough
    } = this.props;

    return (
      <div className="process">
        <ProgressBar
          show={showProgressBar}
          handleClick={this.handleBarItemClick}
        />
        <div
          className="process-scroll-cover"
          style={{ height: scrollCoverHeight }}
        />
        <article
          className={`process-container ${mergeHeader ? 'show-bg' : ''}`}
          {...passthrough}
        >
          <ProcessTab
            title="Como Funciona"
            disappear={mergeHeader}
            handleClick={handleGoToProcess}
          />

          <section className="content-section">
            <h2>Veja o v√≠deo!</h2>
            <p>
              Nesse v√≠deo, produzido pelo integrante do grupo Gabriel Fernandes,
              voc√™ v√™ de perto como funciona o sistema de Coleta Seletiva dentro
              do CEFET/RJ Maracan√£
            </p>
          </section>

          <div className="video-container">
            <ProportionalVideo ratio={9 / 16} />
          </div>

          <section id="section-a">
            <div className="content-section">
              <h2>Gera√ß√£o</h2>
              <p>
                Todos n√≥s, ao longo de um dia, somos respons√°veis pela produ√ß√£o
                de grande quantidade de lixo. Poucos se d√£o conta do volume
                daquilo que produzimos diariamente... Muitos desses materiais
                podem ser ainda reciclados, da√≠ surgindo a ideia de fazer uma
                coleta seletiva.
              </p>
              <p>
                Os res√≠duos produzidos mais comuns s√£o descartados nas lixeiras
                azuis e amarelas distribu√≠das ao longo do CEFET/RJ. Mas aten√ß√£o!
                Na lixeira amarela devem ser colocados materiais que poder√£o ser
                recicl√°veis (chamado &quot;lixo seco&quot;), enquanto nas azuis
                os materiais que n√£o s√£o recicl√°veis (&quot;lixo √∫mido&quot;).
                Se ficar na d√∫vida, consulte as imagens a seguir:
              </p>
              <div className="photos-container">
                <img
                  src={Image01}
                  alt="Ilustra√ß√£o mostrando exemplo de materiais recicl√°veis"
                />
                <img
                  src={Image02}
                  alt="Ilustra√ß√£o mostrando exemplo de materiais n√£o recicl√°veis"
                />
              </div>
              <p>
                Materiais mais espec√≠ficos como pilhas, √≥leo de cozinha e
                eletr√¥nicos possuem pontos de coleta definidos. Fique sabendo
                onde eles est√£o:
              </p>
              <ul>
                <li>Pilha - Prefeitura e restaurante</li>
                <li>√ìleo de cozinha - Pavilh√£o de Seguran√ßa do Trabalho</li>
                <li>
                  Res√≠duo eletr√¥nico - Biblioteca, SECAD e na incubadora de
                  empresas
                </li>
              </ul>
            </div>

            <div className="content-section">
              <h2>Depoimentos</h2>
            </div>

            <div className="content-card-container">
              {randomized.map(content => (
                <ContentCard key={content.name} info={content} />
              ))}
            </div>
          </section>

          <section id="section-b">
            <div className="content-section">
              <h2>Separa√ß√£o</h2>
              <p>
                O primeiro respons√°vel pela separa√ß√£o do material √©... VOC√ä!
                Isso mesmo! A destina√ß√£o correta do que √© recicl√°vel ou n√£o √© a
                primeira parte desta cadeia.
              </p>
              <p>
                A partir da√≠, a equipe de trabalhadores terceirizados da limpeza
                realiza a coleta interna e o armazenamento deste material at√©
                chegar ao seu destino. Atualmente o respons√°vel por esta
                importante etapa √© o Fernando.
              </p>
            </div>

            <RibbonLink to="/galeria" title="Veja todas as fotos na galeria" />

            <div className="photos-container big">
              <img className="big" src={Separacao01} alt="" />
              <img className="big" src={Separacao02} alt="" />
              <img className="big" src={Separacao03} alt="" />
            </div>
          </section>

          <section id="section-c" className="content-section">
            <h2>Coleta</h2>
            <p>
              Os res√≠duos recicl√°veis produzidos pela comunidade cefetiana s√£o
              destinados a associa√ß√µes/cooperativas de catadores de materiais
              recicl√°veis. Estas cooperativas s√£o selecionadas atrav√©s de um
              edital com chamada p√∫blica e divulgado pela institui√ß√£o. Todo o
              processo √© coordenado pela Comiss√£o Central de Coleta Seletiva
              Solid√°ria do CEFET/RJ, presidida pela prof¬™ Aline Guimar√£es
              Monteiro Trigo
            </p>
            <p>
              Atualmente as cooperativas que recebem os materiais recicl√°veis
              s√£o COOPQUITUNGO ‚Äì Cooperativa de Trabalho Coopquitungo Cooperando
              e Reciclando Rio Ltda (CNPJ 09347750/0001-09) e a COOPEMBAU ‚Äì
              Cooperativa de Trabalho e Produ√ß√£o dos Catadores de Materiais
              Recicl√°veis da Pavuna (CNPJ 23189494/0001-08), selecionadas a
              partir do edital n¬∫ 1/2018.
            </p>
            <p>
              Para maiores informa√ß√µes, visite a p√°gina da CCCSS de CEFET/RJ:
              <br />
              <a
                href="http://www.cefet-rj.br/index.php/apresentacao-cccss"
                target="_blank"
                rel="noopener noreferrer"
              >
                http://www.cefet-rj.br/index.php/apresentacao-cccss
              </a>
            </p>
          </section>
        </article>
      </div>
    );
  }
}

export default Process;
